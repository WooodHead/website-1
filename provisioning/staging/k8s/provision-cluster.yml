---
# This file is run first manually to provision the entire K8s cluster. From then on, the workflows take over to run
# the deployments as and when required.
- hosts: localhost
  vars_files:
    - "{{ playbook_dir }}/../secrets.yml"
  vars:
    identifier: "ps2alerts-website-staging"
    url: "https://staging.ps2alerts.com"
    version: "0.0.1"
  tasks:
    - name: Create K8s Service
      k8s:
        state: present
        namespace: default
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ identifier }}"
            labels:
              app: "{{ identifier }}"
          spec:
            type: ClusterIP
            selector:
              app: "{{ identifier }}"
            ports:
              - port: 80
                targetPort: 80

    - name: Create K8s Deployment
      k8s:
        state: present
        namespace: default
        force: yes
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: "{{ identifier }}"
            labels:
              app: "{{ identifier }}"
          spec:
            replicas: 1
            revisionHistoryLimit: 1
            selector:
              matchLabels:
                app: "{{ identifier }}"
            template:
              metadata:
                labels:
                  app: "{{ identifier }}"
              spec:
                containers:
                  - name: "{{ identifier }}"
                    image: "maelstromeous/applications:{{ identifier }}-{{ version }}"
                    ports:
                      - containerPort: 80
                    env:
                      - name: ENVIRONMENT
                        value: "staging"
                      - name: VERSION
                        value: "{{ version }}"
                      - name: BASE_URL
                        value: "{{ url }}"
                imagePullSecrets:
                  - name: regcred

    - name: Create K8s LetsEncrypt certificate issuer
      k8s:
        state: present
        namespace: default
        definition:
          apiVersion: cert-manager.io/v1alpha2
          kind: ClusterIssuer
          metadata:
            name: "{{ identifier }}"
          spec:
            acme:
              email: matt@mattcavanagh.me
              server: https://acme-v02.api.letsencrypt.org/directory
              privateKeySecretRef:
                name: "{{ identifier }}"
              solvers:
                - http01:
                    ingress:
                      class: nginx

    - name: Create K8s TLS Ingress using preexisting Load Balancer
      k8s:
        state: present
        namespace: default
        definition:
          apiVersion: extensions/v1beta1
          kind: Ingress
          metadata:
            name: "{{ identifier }}"-ingress
            annotations:
              kubernetes.io/ingress.class: nginx
              cert-manager.io/cluster-issuer: "{{ identifier }}-ingress"
              nginx.ingress.kubernetes.io/proxy-body-size: 10m
          spec:
            tls:
              - hosts:
                  - "{{ url }}"
                secretName: "{{ identifier }}"
            rules:
              - host: "{{ url }}"
                http:
                  paths:
                    - backend:
                        serviceName: "{{ identifier }}"
                        servicePort: 80
